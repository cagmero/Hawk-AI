export interface Event {
  EventID: string;
  TimeGenerated: string;
  SourceName: string;
  EventType: string;
  EventCategory: string;
  Message: string;
  Computer?: string;
  EventRecordID?: string;
}

export interface ParsedXml {
  Events: {
    Event: Event[];
  };
}

export interface ProcessedEventData {
  EventID: string;
  TimeCreated: string;
  Computer: string;
  EventRecordID: string;
  SourceName: string;
  EventType: string;
  EventCategory: string;
  Message: string;
  LogType: string;
}


export interface LogEventData {
  // id?: string; // Primary key, default value generated by gen_random_uuid()
  // computer_id: string; // Foreign key referencing the computers table
  event_id: string; // Identifier for the event, cannot be null
  source_name: string; // Name of the source generating the event, cannot be null
  event_type: string; // Type of the event, cannot be null
  event_category: string | null; // Category of the event, can be null
  message: string | null; // Message associated with the event, can be null
  time_generated: string; // Timestamp when the event was generated, cannot be null
  created_at?: string; // Timestamp when the record was created, default value is the current timestamp
  log_type: string; // Type of log, default value is 'Security'
}

